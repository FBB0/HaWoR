#!/usr/bin/env python3
"""
HaWoR Training Launcher
Auto-generated by setup_training_pipeline.py
"""

import sys
import argparse
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from enhanced_training_pipeline import TrainingPipeline

def main():
    """Launch HaWoR training"""
    parser = argparse.ArgumentParser(description="Launch HaWoR Training")
    parser.add_argument("--config", default="configs/production_training_config.json",
                       help="Path to training configuration file")
    parser.add_argument("--resume", type=str, default=None,
                       help="Path to checkpoint to resume from")
    parser.add_argument("--dry-run", action="store_true",
                       help="Perform dry run without actual training")

    args = parser.parse_args()

    print("🚀 HaWoR Training Pipeline")
    print("=" * 50)

    # Load configuration
    config_path = Path(args.config)
    if not config_path.exists():
        print(f"❌ Configuration file not found: {config_path}")
        return 1

    print(f"📄 Using configuration: {config_path}")

    # Initialize training pipeline
    try:
        pipeline = TrainingPipeline(str(config_path))

        if args.dry_run:
            print("🔍 Running dry run...")
            pipeline.validate_setup()
            print("✅ Dry run completed successfully")
            return 0

        # Start training
        print("🏃 Starting training...")
        trainer, model = pipeline.train()

        print("✅ Training completed successfully!")
        print(f"📊 Logs saved to: {pipeline.config.get('output', {}).get('log_dir', 'logs')}")
        print(f"💾 Checkpoints saved to: {pipeline.config.get('output', {}).get('checkpoint_dir', 'checkpoints')}")

    except Exception as e:
        print(f"❌ Training failed: {e}")
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
